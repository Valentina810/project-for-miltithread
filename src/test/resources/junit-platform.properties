# Включаем параллельное выполнение тестов
# Если параметр установлен в false, тесты выполняются последовательно (по умолчанию)
junit.jupiter.execution.parallel.enabled=true

# Определяем режим параллельного выполнения для тестов (по умолчанию - sequential)
# concurrent  → каждый тестовый метод может выполняться параллельно
# sequential  → тесты выполняются последовательно (стандартное поведение JUnit)
junit.jupiter.execution.parallel.mode.default=concurrent

# Определяем режим параллельного выполнения для тестовых классов
# concurrent  → классы с тестами запускаются параллельно
# sequential  → каждый класс выполняется последовательно (но методы внутри него могут быть параллельными)
junit.jupiter.execution.parallel.mode.classes.default=concurrent
junit.jupiter.execution.parallel.mode.classes.default=concurrent

# Определяем стратегию управления количеством потоков
# dynamic  → JUnit автоматически подбирает число потоков в зависимости от количества доступных ядер CPU
# fixed    → Устанавливает фиксированное число потоков (не используется в данном случае)
junit.jupiter.execution.parallel.config.strategy=dynamic

# Определяем, сколько потоков (ядр) задействовать для тестов
# Значение - коэффициент умножения количества доступных CPU
# 1.0  → использовать 100% доступных ядер
# 0.75 → использовать 75% доступных ядер
# 0.5  → использовать 50% доступных ядер
junit.jupiter.execution.parallel.config.dynamic.factor=1.0
